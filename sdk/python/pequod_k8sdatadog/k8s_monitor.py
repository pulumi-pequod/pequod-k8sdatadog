# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['K8sMonitorArgs', 'K8sMonitor']

@pulumi.input_type
class K8sMonitorArgs:
    def __init__(__self__, *,
                 drift_management: Optional[pulumi.Input[str]] = None,
                 team_assignment: Optional[pulumi.Input[str]] = None,
                 ttl_time: Optional[pulumi.Input[float]] = None):
        """
        The set of arguments for constructing a K8sMonitor resource.
        :param pulumi.Input[str] drift_management: Drift management setting for refresh or correction.
        :param pulumi.Input[str] team_assignment: Team to which the stack should be assigned.
        :param pulumi.Input[float] ttl_time: Time to live time setting.
        """
        if drift_management is not None:
            pulumi.set(__self__, "drift_management", drift_management)
        if team_assignment is not None:
            pulumi.set(__self__, "team_assignment", team_assignment)
        if ttl_time is not None:
            pulumi.set(__self__, "ttl_time", ttl_time)

    @property
    @pulumi.getter(name="driftManagement")
    def drift_management(self) -> Optional[pulumi.Input[str]]:
        """
        Drift management setting for refresh or correction.
        """
        return pulumi.get(self, "drift_management")

    @drift_management.setter
    def drift_management(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drift_management", value)

    @property
    @pulumi.getter(name="teamAssignment")
    def team_assignment(self) -> Optional[pulumi.Input[str]]:
        """
        Team to which the stack should be assigned.
        """
        return pulumi.get(self, "team_assignment")

    @team_assignment.setter
    def team_assignment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "team_assignment", value)

    @property
    @pulumi.getter(name="ttlTime")
    def ttl_time(self) -> Optional[pulumi.Input[float]]:
        """
        Time to live time setting.
        """
        return pulumi.get(self, "ttl_time")

    @ttl_time.setter
    def ttl_time(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "ttl_time", value)


class K8sMonitor(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 drift_management: Optional[pulumi.Input[str]] = None,
                 team_assignment: Optional[pulumi.Input[str]] = None,
                 ttl_time: Optional[pulumi.Input[float]] = None,
                 __props__=None):
        """
        Create a K8sMonitor resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] drift_management: Drift management setting for refresh or correction.
        :param pulumi.Input[str] team_assignment: Team to which the stack should be assigned.
        :param pulumi.Input[float] ttl_time: Time to live time setting.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[K8sMonitorArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a K8sMonitor resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param K8sMonitorArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(K8sMonitorArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 drift_management: Optional[pulumi.Input[str]] = None,
                 team_assignment: Optional[pulumi.Input[str]] = None,
                 ttl_time: Optional[pulumi.Input[float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = K8sMonitorArgs.__new__(K8sMonitorArgs)

            __props__.__dict__["drift_management"] = drift_management
            __props__.__dict__["team_assignment"] = team_assignment
            __props__.__dict__["ttl_time"] = ttl_time
        super(K8sMonitor, __self__).__init__(
            'k8sdatadog:index:K8sMonitor',
            resource_name,
            __props__,
            opts,
            remote=True)

